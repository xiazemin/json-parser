// Code generated from JSON.g4 by ANTLR 4.8. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 13, 123,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3,
	9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 7, 11, 67, 10, 11, 12, 11,
	14, 11, 70, 11, 11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 5, 12, 77, 10, 12,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 5, 15, 88,
	10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 94, 10, 15, 3, 15, 5, 15, 97,
	10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 103, 10, 15, 3, 15, 5, 15, 106,
	10, 15, 3, 16, 3, 16, 3, 16, 7, 16, 111, 10, 16, 12, 16, 14, 16, 114, 11,
	16, 5, 16, 116, 10, 16, 3, 17, 3, 17, 5, 17, 120, 10, 17, 3, 17, 3, 17,
	2, 2, 18, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11,
	21, 12, 23, 2, 25, 2, 27, 2, 29, 13, 31, 2, 33, 2, 3, 2, 7, 4, 2, 36, 36,
	94, 94, 10, 2, 36, 36, 49, 49, 94, 94, 100, 100, 104, 104, 112, 112, 116,
	116, 118, 118, 5, 2, 50, 59, 67, 72, 99, 104, 4, 2, 71, 71, 103, 103, 4,
	2, 45, 45, 47, 47, 2, 129, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3,
	2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15,
	3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2,
	29, 3, 2, 2, 2, 3, 35, 3, 2, 2, 2, 5, 37, 3, 2, 2, 2, 7, 39, 3, 2, 2, 2,
	9, 41, 3, 2, 2, 2, 11, 43, 3, 2, 2, 2, 13, 48, 3, 2, 2, 2, 15, 54, 3, 2,
	2, 2, 17, 59, 3, 2, 2, 2, 19, 61, 3, 2, 2, 2, 21, 63, 3, 2, 2, 2, 23, 73,
	3, 2, 2, 2, 25, 78, 3, 2, 2, 2, 27, 84, 3, 2, 2, 2, 29, 105, 3, 2, 2, 2,
	31, 115, 3, 2, 2, 2, 33, 117, 3, 2, 2, 2, 35, 36, 7, 46, 2, 2, 36, 4, 3,
	2, 2, 2, 37, 38, 7, 127, 2, 2, 38, 6, 3, 2, 2, 2, 39, 40, 7, 95, 2, 2,
	40, 8, 3, 2, 2, 2, 41, 42, 7, 60, 2, 2, 42, 10, 3, 2, 2, 2, 43, 44, 7,
	118, 2, 2, 44, 45, 7, 116, 2, 2, 45, 46, 7, 119, 2, 2, 46, 47, 7, 103,
	2, 2, 47, 12, 3, 2, 2, 2, 48, 49, 7, 104, 2, 2, 49, 50, 7, 99, 2, 2, 50,
	51, 7, 110, 2, 2, 51, 52, 7, 117, 2, 2, 52, 53, 7, 103, 2, 2, 53, 14, 3,
	2, 2, 2, 54, 55, 7, 112, 2, 2, 55, 56, 7, 119, 2, 2, 56, 57, 7, 110, 2,
	2, 57, 58, 7, 110, 2, 2, 58, 16, 3, 2, 2, 2, 59, 60, 7, 125, 2, 2, 60,
	18, 3, 2, 2, 2, 61, 62, 7, 93, 2, 2, 62, 20, 3, 2, 2, 2, 63, 68, 7, 36,
	2, 2, 64, 67, 5, 23, 12, 2, 65, 67, 10, 2, 2, 2, 66, 64, 3, 2, 2, 2, 66,
	65, 3, 2, 2, 2, 67, 70, 3, 2, 2, 2, 68, 66, 3, 2, 2, 2, 68, 69, 3, 2, 2,
	2, 69, 71, 3, 2, 2, 2, 70, 68, 3, 2, 2, 2, 71, 72, 7, 36, 2, 2, 72, 22,
	3, 2, 2, 2, 73, 76, 7, 94, 2, 2, 74, 77, 9, 3, 2, 2, 75, 77, 5, 25, 13,
	2, 76, 74, 3, 2, 2, 2, 76, 75, 3, 2, 2, 2, 77, 24, 3, 2, 2, 2, 78, 79,
	7, 119, 2, 2, 79, 80, 5, 27, 14, 2, 80, 81, 5, 27, 14, 2, 81, 82, 5, 27,
	14, 2, 82, 83, 5, 27, 14, 2, 83, 26, 3, 2, 2, 2, 84, 85, 9, 4, 2, 2, 85,
	28, 3, 2, 2, 2, 86, 88, 7, 47, 2, 2, 87, 86, 3, 2, 2, 2, 87, 88, 3, 2,
	2, 2, 88, 89, 3, 2, 2, 2, 89, 90, 5, 31, 16, 2, 90, 91, 7, 48, 2, 2, 91,
	93, 5, 31, 16, 2, 92, 94, 5, 33, 17, 2, 93, 92, 3, 2, 2, 2, 93, 94, 3,
	2, 2, 2, 94, 106, 3, 2, 2, 2, 95, 97, 7, 47, 2, 2, 96, 95, 3, 2, 2, 2,
	96, 97, 3, 2, 2, 2, 97, 98, 3, 2, 2, 2, 98, 99, 5, 31, 16, 2, 99, 100,
	5, 33, 17, 2, 100, 106, 3, 2, 2, 2, 101, 103, 7, 47, 2, 2, 102, 101, 3,
	2, 2, 2, 102, 103, 3, 2, 2, 2, 103, 104, 3, 2, 2, 2, 104, 106, 5, 31, 16,
	2, 105, 87, 3, 2, 2, 2, 105, 96, 3, 2, 2, 2, 105, 102, 3, 2, 2, 2, 106,
	30, 3, 2, 2, 2, 107, 116, 7, 50, 2, 2, 108, 112, 4, 51, 59, 2, 109, 111,
	4, 50, 59, 2, 110, 109, 3, 2, 2, 2, 111, 114, 3, 2, 2, 2, 112, 110, 3,
	2, 2, 2, 112, 113, 3, 2, 2, 2, 113, 116, 3, 2, 2, 2, 114, 112, 3, 2, 2,
	2, 115, 107, 3, 2, 2, 2, 115, 108, 3, 2, 2, 2, 116, 32, 3, 2, 2, 2, 117,
	119, 9, 5, 2, 2, 118, 120, 9, 6, 2, 2, 119, 118, 3, 2, 2, 2, 119, 120,
	3, 2, 2, 2, 120, 121, 3, 2, 2, 2, 121, 122, 5, 31, 16, 2, 122, 34, 3, 2,
	2, 2, 14, 2, 66, 68, 76, 87, 93, 96, 102, 105, 112, 115, 119, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "','", "'}'", "']'", "':'", "'true'", "'false'", "'null'", "'{'", "'['",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "LCURLY", "LBRACK", "STRING", "NUMBER",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "LCURLY", "LBRACK",
	"STRING", "ESC", "UNICODE", "HEX", "NUMBER", "INT", "EXP",
}

type JSONLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewJSONLexer(input antlr.CharStream) *JSONLexer {

	l := new(JSONLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "JSON.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// JSONLexer tokens.
const (
	JSONLexerT__0   = 1
	JSONLexerT__1   = 2
	JSONLexerT__2   = 3
	JSONLexerT__3   = 4
	JSONLexerT__4   = 5
	JSONLexerT__5   = 6
	JSONLexerT__6   = 7
	JSONLexerLCURLY = 8
	JSONLexerLBRACK = 9
	JSONLexerSTRING = 10
	JSONLexerNUMBER = 11
)
